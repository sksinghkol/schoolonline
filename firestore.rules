rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===========================================================
    // Helper functions
    // ===========================================================
    function isSignedIn() {
      return request.auth != null;
    }

    function getAdminData() {
      return get(/databases/$(database)/documents/admin/$(request.auth.uid)).data;
    }

    function isApprovedAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admin/$(request.auth.uid));
    }

    function isSuperAdmin() {
      let adminData = getAdminData();
      return isApprovedAdmin() && adminData != null && adminData.role == 'super-admin';
    }

    function isDirectorForSchoolId(schoolId) {
      return isSignedIn() && schoolId != null &&
        exists(/databases/$(database)/documents/schools/$(schoolId)/directors/$(request.auth.uid));
    }

    function isTeacherForSchoolId(schoolId) {
      return isSignedIn() &&
        schoolId != null &&
        exists(/databases/$(database)/documents/schools/$(schoolId)/teachers/$(request.auth.uid));
    }

    function isItDepartmentForSchoolId(schoolId) {
      return isSignedIn() && schoolId != null &&
        exists(/databases/$(database)/documents/schools/$(schoolId)/itdepartments/$(request.auth.uid));
    }

    // ===========================================================
    // üîπ Admins Collection
    // ===========================================================
    match /admin/{adminId} {
      allow read, write: if request.auth.uid == adminId;
      match /login_records/{recordId} {
        // SuperAdmins can read any admin's login records.
        allow read: if isSuperAdmin() || request.auth.uid == adminId;
        allow write: if request.auth.uid == adminId;
      }
    }

    // ===========================================================
    // üîπ Schools & Subcollections
    // ===========================================================
    match /schools/{schoolId} {
      // Public can list schools (for "Select Your School") and get a school document.
      // `get` is needed for unauthenticated users to read subcollections like `about_school`.
      allow get: if true;
      allow list: if true;

      // Only admins can create or delete schools. Directors and IT staff can update.
      allow create, delete: if isApprovedAdmin();
      allow update: if isApprovedAdmin() || isDirectorForSchoolId(schoolId) || isItDepartmentForSchoolId(schoolId);

      // üîπ Directors subcollection
      match /directors/{directorId} {
        allow get, list: if true;
        allow create, update, delete: if isApprovedAdmin();
      }

      // üîπ Principals subcollection
      match /principals/{principalId} {
        allow get, list: if true;
        allow create, update, delete: if isApprovedAdmin();
      }

      // Teachers
      match /teachers/{teacherId} {
        allow get, list: if true;
        allow create, update, delete: if isDirectorForSchoolId(schoolId) || isApprovedAdmin();

        // Question Bank
        match /question_bank/{questionId} {
          allow read, write, update, delete: if request.auth.uid == teacherId ||
                                              isDirectorForSchoolId(schoolId) ||
                                              isApprovedAdmin();
          // Students or others can only read approved questions
          allow read: if resource.data.status == "approved";
        }

        // YouTube Videos
        match /youtube/{videoId} {
          allow read, write, update, delete: if request.auth.uid == teacherId ||
                                              isDirectorForSchoolId(schoolId) ||
                                              isApprovedAdmin();
          // Students can only read approved videos
          allow read: if resource.data.status == "approved";
        }

        // ---- Visiting Card Applications subcollection ----
        match /visiting_applications/{applicationId} {
          // Teacher: can create an application for themselves.
          allow create: if request.auth.uid == teacherId;
          // Teacher/Director/Admin: can read/list applications.
          allow get, list: if request.auth.uid == teacherId || isDirectorForSchoolId(schoolId) || isApprovedAdmin();
          // Director/Admin: can update (e.g., approve/reject) or delete applications.
          allow update, delete: if isDirectorForSchoolId(schoolId) || isApprovedAdmin();
        }

        // ---- ID Card Applications subcollection ----
        match /id_card_applications/{applicationId} {
          // Teacher: can create an application for themselves.
          allow create: if request.auth.uid == teacherId;
          // Teacher/Director/Admin: can read/list applications.
          allow get, list: if request.auth.uid == teacherId || isDirectorForSchoolId(schoolId) || isApprovedAdmin();
          // Director/Admin: can update (e.g., approve/reject) or delete applications.
          allow update, delete: if isDirectorForSchoolId(schoolId) || isApprovedAdmin();
        }
      }

      // ---- Exams & Question Papers ----
      match /exams/{examId} {
        // üë©‚Äçüè´ Teacher: can create an exam for their school
        allow create: if isSignedIn() && request.resource.data.schoolId == schoolId && request.auth.uid == request.resource.data.teacherId;

        // üë©‚Äçüè´ Teacher / Director / Admin: can read exams for their school
        allow get, list: if isSignedIn() && (isDirectorForSchoolId(schoolId) || isApprovedAdmin() || get(/databases/$(database)/documents/schools/$(schoolId)/teachers/$(request.auth.uid)).data != null);

        // üë©‚Äçüè´ Teacher: can update the status of an exam they created
        // üé¨ Director / Admin: can update any exam in the school
        allow update: if (request.auth.uid == resource.data.teacherId) || isDirectorForSchoolId(schoolId) || isApprovedAdmin();
      }

      match /teachers/{teacherId}/question_papers/{paperId} {
        // üë©‚Äçüè´ Teacher: can create a question paper for themselves
        allow create: if request.auth.uid == teacherId;

        // üë©‚Äçüè´ Teacher / Director / Admin: can read question papers
        allow get, list: if request.auth.uid == teacherId || isDirectorForSchoolId(schoolId) || isApprovedAdmin();
      }

      // Staff-like roles
      match /{userCollection}/{userId} {
        allow get, list: if userCollection in [
          'staffs','frontdesks','securitys','transports',
          'itdepartments','accounts','examcontrollers','parents'
        ];
        allow create, update, delete: if isDirectorForSchoolId(schoolId) || isApprovedAdmin();
      }

      // Students
      match /students/{studentId} {
        allow get, list: if true;
        allow create, update, delete: if isDirectorForSchoolId(schoolId) || isApprovedAdmin();
        allow update: if request.auth != null && request.auth.uid == studentId;
      }

      // Allow Directors, Admins, or IT staff to manage classes
      // üîπ Classes subcollection
      match /classes/{classId} {
        // Allow Directors, Admins, or IT staff to manage classes
        allow read, write: if isDirectorForSchoolId(schoolId) || isApprovedAdmin() || get(/databases/$(database)/documents/schools/$(schoolId)/itdepartments/$(request.auth.uid)).data != null;
      }
    }

    // ===========================================================
    // üîπ Subscription
    // ===========================================================
    match /subscription/{subId} {
      allow read, list: if isApprovedAdmin();
      allow create, update, delete: if isApprovedAdmin();
    }

    // ===========================================================
    // üîπ Login History
    // ===========================================================
    match /login_history/{docId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isSuperAdmin();
    }


    // ===========================================================
    // üîπ Public Product Collections
    // ===========================================================
    match /holders/{holderId} {
      allow read, list: if true;
      allow create, update, delete: if isApprovedAdmin();
    }

    match /hooks/{hookId} {
      allow read, list: if true;
      allow create, update, delete: if isApprovedAdmin();
    }

    match /clip/{clipId} {
      allow read, list: if true;
      allow create, update, delete: if isApprovedAdmin();
    }

    match /lanyards/{lanyardId} {
      allow read, list: if true;
      allow create, update, delete: if isApprovedAdmin();
    }

    match /cards/{cardId} {
      allow read, list: if true;
      allow create, update, delete: if isApprovedAdmin();
    }

    match /visiting_cards/{cardId} {
      allow read, list: if true;
      allow create, update, delete: if isApprovedAdmin();
    }

    // ===========================================================
    // üîπ Other Product Collections
    // ===========================================================
    match /prospectus/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /library_card/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /medals/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /gate_pass/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /student_outpass/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /vistors_pass/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /brochure/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /key_ring/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /leaflet/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /card_design/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /lanyard_design/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
  }

    // ===========================================================
    // Collection Group Queries
    // ===========================================================
    // This rule allows teachers to fetch questions for an exam, and allows
    // the public-facing "School Question Bank" to show approved questions.
    match /{path=**}/question_bank/{questionId} {
      // Allow reading a single document if it's approved, or if the user is the teacher/director/admin.
      allow get: if resource.data.status == "approved" || (isSignedIn() &&
        (request.auth.uid == resource.data.teacherId ||
         isDirectorForSchoolId(resource.data.schoolId) ||
         isApprovedAdmin()));

      // Allow queries if they filter by schoolId.
      // The query MUST contain a `where('schoolId', '==', '...')` clause.
      // This rule ensures the user is only querying for questions within a school they have access to.
      allow list: if isSignedIn()
        && request.query.keys().hasAll(['schoolId', 'questionClass', 'subject'])
        && (
          isDirectorForSchoolId(request.query.filters.schoolId) ||
          request.auth.token.teacher_for_school_id == request.query.filters.schoolId ||
          isApprovedAdmin()
        );

      allow write, update, delete: if request.auth != null &&
                                   (request.auth.uid == resource.data.teacherId ||
                                    isDirectorForSchoolId(resource.data.schoolId) ||
                                    isApprovedAdmin());
    }

    match /{path=**}/youtube/{videoId} {
      allow read: if resource.data.status == "approved" ||
                  (request.auth != null &&
                   (request.auth.uid == resource.data.teacherId ||
                    isDirectorForSchoolId(resource.data.schoolId) ||
                    isApprovedAdmin()));
      allow write, update, delete: if request.auth != null &&
                                   (request.auth.uid == resource.data.teacherId ||
                                    isDirectorForSchoolId(resource.data.schoolId) ||
                                    isApprovedAdmin());
    }

    // This rule is required for the IT Department to view all question papers.
    // It allows querying the 'question_papers' collection group.
    match /{path=**}/question_papers/{paperId} {
      // Allow reading if the user is an IT department member for that school,
      // a director, or an admin, AND the query is filtering by a specific schoolId.
      allow get: if isSignedIn() && (isDirectorForSchoolId(resource.data.schoolId) || isApprovedAdmin() ||
        exists(/databases/$(database)/documents/schools/$(resource.data.schoolId)/itdepartments/$(request.auth.uid)));

      // Allow listing if the user is an IT department member for that school, a director, or an admin.
      allow list: if isSignedIn() &&
        (isDirectorForSchoolId(request.query.filters.schoolId) || isApprovedAdmin() ||
        exists(/databases/$(database)/documents/schools/$(request.query.filters.schoolId)/itdepartments/$(request.auth.uid)) ||
        request.auth.token.it_for_school_id == request.query.filters.schoolId); // Keep custom claim for flexibility
    }

    // This rule allows anyone to query the 'reviews' collection group,
    // as long as they are filtering by a specific schoolId.
    match /{path=**}/reviews/{reviewId} {
        allow list: if request.query.filters.schoolId == resource.data.schoolId;
        allow get: if true;
    }
}