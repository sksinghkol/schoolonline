rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===========================================================
    // üîπ Helper Functions
    // ===========================================================
    function isSignedIn() {
      return request.auth != null;
    }

    function getAdminData() {
      return get(/databases/$(database)/documents/admin/$(request.auth.uid)).data;
    }

    function isApprovedAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admin/$(request.auth.uid));
    }

    function isSuperAdmin() {
      let adminData = getAdminData();
      return isApprovedAdmin() && adminData != null && adminData.role == 'super-admin';
    }

    function isDirectorForSchoolId(schoolId) {
      return isSignedIn() && schoolId != null &&
        exists(/databases/$(database)/documents/schools/$(schoolId)/directors/$(request.auth.uid));
    }

    // ===========================================================
    // üîπ Admins Collection
    // ===========================================================
    match /admin/{adminId} {
      allow read, write: if request.auth.uid == adminId;
      match /login_records/{recordId} {
        // SuperAdmins can read any admin's login records.
        allow read: if isSuperAdmin() || request.auth.uid == adminId;
        allow write: if request.auth.uid == adminId;
      }
    }

    // ===========================================================
    // üîπ Schools & Directors
    // ===========================================================
    match /schools/{schoolId} {
      // ‚úÖ Public can read and list schools (for "Select Your School")
      allow get, list: if true;

      // Only admins can create, update, or delete schools
      allow create, update, delete: if isApprovedAdmin();

      // üîπ Directors subcollection
      match /directors/{directorId} {
        allow get, list: if true;
        allow create, update, delete: if isApprovedAdmin();
      }

      // üîπ Principals subcollection
      match /principals/{principalId} {
        allow get, list: if true;
        allow create, update, delete: if isApprovedAdmin();
      }

      match /teachers/{teacherId} {
        allow get, list: if true;
        allow create, update, delete: if isDirectorForSchoolId(schoolId) || isApprovedAdmin();

        // ---- YouTube subcollection ----
        match /youtube/{videoId} {
          // ‚úÖ Public: can read approved videos.
          // ‚úÖ Teacher/Director/Admin: can read all their videos.
          allow read: if resource.data.status == "approved" ||
            (request.auth != null &&
             (request.auth.uid == teacherId ||
              isDirectorForSchoolId(schoolId) ||
              isApprovedAdmin()));
          allow write: if request.auth != null && request.auth.uid == teacherId;

          // ---- Reviews subcollection ----
          match /reviews/{reviewId} {
            // ‚úÖ Public: can read all reviews for a video.
            allow get, list: if true;
            // ‚úÖ Authenticated users: can create a review.
            allow create: if isSignedIn();
            // ‚úÖ User: can only update/delete their own review.
            allow update, delete: if isSignedIn() && request.auth.uid == resource.data.authorId;
          }
        }

        // ---- Question Bank subcollection ----
        match /question_bank/{questionId} {
          // üë©‚Äçüè´ Teacher: can create, update, or delete their own questions
          allow create, update, delete: if request.auth != null && request.auth.uid == teacherId;

          // üë©‚Äçüè´ Teacher / Director / Admin: can read all questions for their school
          allow get, list: if request.auth != null &&
            (request.auth.uid == teacherId ||
             isDirectorForSchoolId(schoolId) ||
             isApprovedAdmin());
        }

        // ---- Visiting Card Applications subcollection ----
        match /visiting_applications/{applicationId} {
          // ‚úÖ Teacher: can create an application for themselves.
          allow create: if request.auth.uid == teacherId;
          // ‚úÖ Teacher/Director/Admin: can read/list applications.
          allow get, list: if request.auth.uid == teacherId || isDirectorForSchoolId(schoolId) || isApprovedAdmin();
          // ‚úÖ Director/Admin: can update (e.g., approve/reject) or delete applications.
          allow update, delete: if isDirectorForSchoolId(schoolId) || isApprovedAdmin();
        }

        // ---- ID Card Applications subcollection ----
        match /id_card_applications/{applicationId} {
          // ‚úÖ Teacher: can create an application for themselves.
          allow create: if request.auth.uid == teacherId;
          // ‚úÖ Teacher/Director/Admin: can read/list applications.
          allow get, list: if request.auth.uid == teacherId || isDirectorForSchoolId(schoolId) || isApprovedAdmin();
          // ‚úÖ Director/Admin: can update (e.g., approve/reject) or delete applications.
          allow update, delete: if isDirectorForSchoolId(schoolId) || isApprovedAdmin();
        }
      }
                
         // üîπ Generic staff-like roles (non-teaching)
      match /{userCollection}/{userId} {
        allow get, list: if userCollection in [
          'staffs', 'frontdesks', 'securitys', 'transports',
          'itdepartments', 'accounts', 'examcontrollers', 'parents'
        ];
        allow list: if isDirectorForSchoolId(schoolId) || isApprovedAdmin();
        allow create, delete: if isDirectorForSchoolId(schoolId) || isApprovedAdmin();
        allow update: if request.auth.uid == userId || isDirectorForSchoolId(schoolId) || isApprovedAdmin();
      }

      // üîπ Students subcollection
      match /students/{studentId} {
        allow get, list: if true;
        allow create, update, delete: if isDirectorForSchoolId(schoolId) || isApprovedAdmin();
        allow update: if request.auth != null && request.auth.uid == studentId;
      }
    }

    // ===========================================================
    // üîπ Subscription
    // ===========================================================
    match /subscription/{subId} {
      allow read, list: if isApprovedAdmin();
      allow create, update, delete: if isApprovedAdmin();
    }

    // ===========================================================
    // üîπ Login History
    // ===========================================================
    match /login_history/{docId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isSuperAdmin();
    }


    // ===========================================================
    // üîπ Public Product Collections
    // ===========================================================
    match /holders/{holderId} {
      allow read, list: if true;
      allow create, update, delete: if isApprovedAdmin();
    }

    match /hooks/{hookId} {
      allow read, list: if true;
      allow create, update, delete: if isApprovedAdmin();
    }

    match /clip/{clipId} {
      allow read, list: if true;
      allow create, update, delete: if isApprovedAdmin();
    }

    match /lanyards/{lanyardId} {
      allow read, list: if true;
      allow create, update, delete: if isApprovedAdmin();
    }

    match /cards/{cardId} {
      allow read, list: if true;
      allow create, update, delete: if isApprovedAdmin();
    }

    match /visiting_cards/{cardId} {
      allow read, list: if true;
      allow create, update, delete: if isApprovedAdmin();
    }

    // ===========================================================
    // üîπ Other Product Collections
    // ===========================================================
    match /prospectus/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /library_card/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /medals/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /gate_pass/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /student_outpass/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /vistors_pass/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /brochure/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /key_ring/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /leaflet/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /card_design/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
    match /lanyard_design/{id} { allow read, list: if true; allow create, update, delete: if isApprovedAdmin(); }
  }

    // ===========================================================
    // üîπ Collection Group Rules
    // ===========================================================
    // This rule is required for the public-facing "School Question Bank"
    // It allows anyone to query the 'question_bank' collection group.
    match /{path=**}/question_bank/{questionId} {
      // Allow listing/reading questions ONLY if their status is 'approved'.
      // The query from the client MUST include both:
      // 1. a `where('status', '==', 'approved')` clause
      // 2. a `where('schoolId', '==', schoolId)` clause that matches the document's schoolId
      // It also explicitly allows ordering by 'createdAt'.
      allow get: if resource.data.status == 'approved';
      allow list: if request.query.filters.status == 'approved'
                   && resource.data.schoolId == request.query.filters.schoolId;
    }

    // This rule is required for the public-facing "Student Video" page.
    // It allows anyone to query the 'youtube' collection group for approved videos.
    match /{path=**}/youtube/{videoId} {
      // Allow reading a single video if its status is 'approved'.
      allow get: if resource.data.status == 'approved';
      // Allow listing/querying videos if the query filters by 'status' and 'schoolId'.
      allow list: if request.query.filters.status == 'approved'
                   && resource.data.schoolId == request.query.filters.schoolId;
    }
}