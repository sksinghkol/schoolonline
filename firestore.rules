rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ðŸ”¹ Common helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getAdminData() {
      return exists(/databases/$(database)/documents/admin/$(request.auth.uid))
        ? get(/databases/$(database)/documents/admin/$(request.auth.uid)).data
        : null;
    }

    function isApprovedAdmin() {
      let adminData = getAdminData();
      return isSignedIn() && adminData != null;
    }

    function isSuperAdmin() {
      let adminData = getAdminData();
      return isApprovedAdmin() && adminData != null && adminData.role == 'super-admin';
    }

    // A director is represented by a document at schools/{schoolId}/directors/{uid}
    function isDirectorForSchoolId(sid) {
      return isSignedIn() &&
        sid != null &&
        exists(/databases/$(database)/documents/schools/$(sid)/directors/$(request.auth.uid));
    }

    // ===========================================================
    // ðŸ”¹ Admins Collection
    // ===========================================================
    match /admin/{adminId} {
      allow read, write: if request.auth.uid == adminId;

      // ðŸ”¸ Subcollection: login_records
      match /login_records/{recordId} {
        allow read, write: if request.auth.uid == adminId || isSuperAdmin();
      }
    }

    // ===========================================================
    // ðŸ”¹ Schools & Directors
    // ===========================================================
    match /schools/{schoolId} {
      // Allow public read for school info so login pages can resolve the slug
      // Optionally restrict to active schools only
      allow read: if true; // or: resource.data.status == 'active';
      allow create, update, delete: if isApprovedAdmin();

      match /directors/{directorId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isApprovedAdmin();
      }

      // ðŸ”¸ Subcollection: students
      match /students/{studentId} {
        // Admins can manage all students (read includes get+list)
        allow read, create, update, delete: if isApprovedAdmin();

        // A signed-in student can only get/update their own doc by UID matching the doc ID
        allow get, update, create: if isSignedIn() && studentId == request.auth.uid;

        // No listing for non-admins
        allow list: if false;
      }
    }

    // ===========================================================
    // ðŸ”¹ Subscription Collection
    // ===========================================================
    match /subscription/{subId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isApprovedAdmin();
    }

    // ===========================================================
    // ðŸ”¹ Admin Login History (Global)
    // ===========================================================
    match /login_history/{docId} {
      // Any signed-in user can create their own login history entries (student/admin/director, etc.)
      allow create: if isSignedIn();

      // Read/list permissions:
      // - Approved admins can read all
      // - Directors can read only entries that match their school (checked via resource.data.schoolId)
      allow read, list: if isApprovedAdmin() || isDirectorForSchoolId(resource.data.schoolId);

      // Only super-admin can modify/delete
      allow update, delete: if isSuperAdmin();
    }


    // ===========================================================
    // ðŸ”¹ Other Collections (Holders, Hooks, Clip, Lanyards, Cards, Visiting Cards, etc.)
    // ===========================================================
    match /holders/{holderId} {
      allow read, write: if isSignedIn();
      function validHolderData() {
        return request.resource.data.keys().hasAll(['holder_name','price','photo','description'])
          && request.resource.data.holder_name is string
          && request.resource.data.price is number
          && request.resource.data.description is string
          && request.resource.data.photo is list;
      }
      allow create, update: if validHolderData();
      allow delete: if isSignedIn();
    }

    match /hooks/{hookId} {
      allow read, write: if isSignedIn();
      function validHookData() {
        return request.resource.data.keys().hasAll(['hook_name','price','photo','description'])
          && request.resource.data.hook_name is string
          && request.resource.data.price is number
          && request.resource.data.description is string
          && (request.resource.data.photo is list || request.resource.data.photo == null);
      }
      allow create, update: if validHookData();
      allow delete: if isSignedIn();
    }

    match /clip/{clipId} {
      allow read: if isSignedIn();
      function validClipData() {
        return request.resource.data.keys().hasAll(['clip_name','price','description','photo'])
          && request.resource.data.clip_name is string
          && request.resource.data.price is number
          && request.resource.data.description is string
          && (request.resource.data.photo is list || request.resource.data.photo == null);
      }
      allow create, update: if validClipData();
      allow delete: if isSignedIn();
    }

    match /lanyards/{lanyardId} {
      allow read, write: if isSignedIn();
      function validLanyardData() {
        return request.resource.data.keys().hasAll(['lanyards_name','price','photo','description'])
          && request.resource.data.lanyards_name is string
          && request.resource.data.price is number
          && request.resource.data.description is string
          && request.resource.data.photo is list;
      }
      allow create, update: if validLanyardData();
      allow delete: if isSignedIn();
    }

    match /cards/{cardId} {
      allow read, write: if isSignedIn();
      function validCardData() {
        return request.resource.data.keys().hasAll(['card_name','price','photo','description'])
          && request.resource.data.card_name is string
          && request.resource.data.price is number
          && request.resource.data.description is string
          && request.resource.data.photo is list;
      }
      allow create, update: if validCardData();
      allow delete: if isSignedIn();
    }

    match /visiting_cards/{cardId} {
      allow read, write: if isSignedIn();
      allow create, update: if request.resource.data.card_name is string &&
                             request.resource.data.price is number &&
                             request.resource.data.price >= 0;
    }

    // ===========================================================
    // ðŸ”¹ Other Product Collections
    // ===========================================================
    match /prospectus/{id} { allow read, write: if isSignedIn(); }
    match /library_card/{id} { allow read, write: if isSignedIn(); }
    match /medals/{id} { allow read, write: if isSignedIn(); }
    match /gate_pass/{id} { allow read, write: if isSignedIn(); }
    match /student_outpass/{id} { allow read, write: if isSignedIn(); }
    match /vistors_pass/{id} { allow read, write: if isSignedIn(); }
    match /brochure/{id} { allow read, write: if isSignedIn(); }
    match /key_ring/{id} { allow read, write: if isSignedIn(); }
    match /leaflet/{id} { allow read, write: if isSignedIn(); }
    match /card_design/{id} { allow read, write: if isSignedIn(); }
    match /lanyard_design/{id} { allow read, write: if isSignedIn(); }
  }
}